#!/usr/bin/env bash
set -e

# 初期設定
message=""
max_wait_time=1200  # default 20 minutes
branch=""

for arg in "$@"; do
  case "$arg" in
    --message=*|-m=*)
      message=${arg#*=}
      ;;
    --timeout=*) timeout_value=${arg#*=}
      if [[ "$timeout_value" =~ ^[0-9]+$ ]]; then
        max_wait_time=$((timeout_value * 60)) 
      else
        echo "Invalid timeout value. Please specify a number (in minutes)."
        exit 1
      fi
      ;;
    --branch=*|-b=*)
      branch=${arg#*=}
      ;;
    *)
      echo "Unknown argument: $arg"
      exit 1
      ;;
  esac
done

if [[ -z "$branch" ]]; then
  branch=$(git rev-parse --abbrev-ref HEAD)
fi

pr_url=$(gh pr view "$branch" --json url -q .url 2>/dev/null)
if [[ -z "$pr_url" ]]; then
  echo "No pull request found for branch: $branch"
  exit 1
fi

start_time=$(date +%s)

check_ci_status() {
  gh run list -b "$branch" --json status,conclusion | jq -r '{
    pending: map(select(.status != "completed")) | length,
    failed: map(select(.conclusion == "failure")) | length
  }'
}

while true; do
  ci_info=$(check_ci_status)
  pending_count=$(echo "$ci_info" | jq -r '.pending')
  failure_count=$(echo "$ci_info" | jq -r '.failed')

  if [[ "$failure_count" -gt 0 ]]; then
    echo "$pr_url"
    exit 1
  fi

  if [[ "$pending_count" -eq 0 ]]; then
    echo "$reviewer $message $pr_url"
    exit 0
  fi

  current_time=$(date +%s)
  elapsed_time=$((current_time - start_time))

  if ((elapsed_time > max_wait_time)); then
    echo "Time limit exceeded ($((max_wait_time / 60)) minutes). Forcefully exiting."
    exit 2
  fi

  sleep 60
done
